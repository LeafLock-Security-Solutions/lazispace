name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
      name: Lint
      runs-on: ubuntu-latest
      timeout-minutes: 10
      steps:
        - name: Checkout code
          uses: actions/checkout@v5

        - name: Set up Go
          uses: actions/setup-go@v5
          with:
            go-version-file: 'go.mod'
            cache: true

        - name: Run golangci-lint
          uses: golangci/golangci-lint-action@v6
          with:
            version: v1.68
            args: --timeout=5m
            skip-cache: false
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Cache gofumpt
        uses: actions/cache@v4
        with:
          path: ~/go/bin/gofumpt
          key: ${{ runner.os }}-gofumpt-v0.6.0

      - name: Install gofumpt
        run: |
          if ! command -v gofumpt &> /dev/null; then
            go install mvdan.cc/gofumpt@v0.6.0
          fi

      - name: Check formatting
        run: |
          if [ -n "$(gofumpt -l .)" ]; then
            echo "Code is not formatted. Please run 'make fmt' locally."
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: |
          if find . -name "*.go" -not -path "./vendor/*" | grep -q .; then
            go build -v ./...
          else
            echo "No Go files found, skipping build"
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run tests
        run: |
          if find . -name "*_test.go" | grep -q .; then
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          else
            echo "No tests found, skipping"
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
